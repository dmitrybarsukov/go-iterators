// Code generated by generate/extensions.go DO NOT EDIT.
package iterator

import (
	"iterator/util"
)

func (i Iterator[T]) MaxByInt(keyFunc func(T) int) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt8(keyFunc func(T) int8) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt16(keyFunc func(T) int16) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt32(keyFunc func(T) int32) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt64(keyFunc func(T) int64) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint(keyFunc func(T) uint) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint8(keyFunc func(T) uint8) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint16(keyFunc func(T) uint16) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint32(keyFunc func(T) uint32) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint64(keyFunc func(T) uint64) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByFloat32(keyFunc func(T) float32) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByFloat64(keyFunc func(T) float64) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByString(keyFunc func(T) string) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByIntOrZeroValue(keyFunc func(T) int) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt8OrZeroValue(keyFunc func(T) int8) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt16OrZeroValue(keyFunc func(T) int16) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt32OrZeroValue(keyFunc func(T) int32) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByInt64OrZeroValue(keyFunc func(T) int64) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUintOrZeroValue(keyFunc func(T) uint) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint8OrZeroValue(keyFunc func(T) uint8) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint16OrZeroValue(keyFunc func(T) uint16) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint32OrZeroValue(keyFunc func(T) uint32) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByUint64OrZeroValue(keyFunc func(T) uint64) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByFloat32OrZeroValue(keyFunc func(T) float32) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByFloat64OrZeroValue(keyFunc func(T) float64) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByStringOrZeroValue(keyFunc func(T) string) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MaxByIntOrDefault(keyFunc func(T) int, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByInt8OrDefault(keyFunc func(T) int8, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByInt16OrDefault(keyFunc func(T) int16, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByInt32OrDefault(keyFunc func(T) int32, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByInt64OrDefault(keyFunc func(T) int64, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByUintOrDefault(keyFunc func(T) uint, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByUint8OrDefault(keyFunc func(T) uint8, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByUint16OrDefault(keyFunc func(T) uint16, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByUint32OrDefault(keyFunc func(T) uint32, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByUint64OrDefault(keyFunc func(T) uint64, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByFloat32OrDefault(keyFunc func(T) float32, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByFloat64OrDefault(keyFunc func(T) float64, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MaxByStringOrDefault(keyFunc func(T) string, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByInt(keyFunc func(T) int) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt8(keyFunc func(T) int8) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt16(keyFunc func(T) int16) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt32(keyFunc func(T) int32) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt64(keyFunc func(T) int64) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint(keyFunc func(T) uint) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint8(keyFunc func(T) uint8) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint16(keyFunc func(T) uint16) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint32(keyFunc func(T) uint32) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint64(keyFunc func(T) uint64) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByFloat32(keyFunc func(T) float32) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByFloat64(keyFunc func(T) float64) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByString(keyFunc func(T) string) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}

func (i Iterator[T]) MinByIntOrZeroValue(keyFunc func(T) int) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt8OrZeroValue(keyFunc func(T) int8) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt16OrZeroValue(keyFunc func(T) int16) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt32OrZeroValue(keyFunc func(T) int32) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByInt64OrZeroValue(keyFunc func(T) int64) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUintOrZeroValue(keyFunc func(T) uint) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint8OrZeroValue(keyFunc func(T) uint8) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint16OrZeroValue(keyFunc func(T) uint16) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint32OrZeroValue(keyFunc func(T) uint32) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByUint64OrZeroValue(keyFunc func(T) uint64) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByFloat32OrZeroValue(keyFunc func(T) float32) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByFloat64OrZeroValue(keyFunc func(T) float64) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByStringOrZeroValue(keyFunc func(T) string) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}

func (i Iterator[T]) MinByIntOrDefault(keyFunc func(T) int, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByInt8OrDefault(keyFunc func(T) int8, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByInt16OrDefault(keyFunc func(T) int16, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByInt32OrDefault(keyFunc func(T) int32, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByInt64OrDefault(keyFunc func(T) int64, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByUintOrDefault(keyFunc func(T) uint, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByUint8OrDefault(keyFunc func(T) uint8, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByUint16OrDefault(keyFunc func(T) uint16, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByUint32OrDefault(keyFunc func(T) uint32, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByUint64OrDefault(keyFunc func(T) uint64, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByFloat32OrDefault(keyFunc func(T) float32, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByFloat64OrDefault(keyFunc func(T) float64, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) MinByStringOrDefault(keyFunc func(T) string, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}

func (i Iterator[T]) SumByInt(keyFunc func(T) int) int {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByInt8(keyFunc func(T) int8) int8 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByInt16(keyFunc func(T) int16) int16 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByInt32(keyFunc func(T) int32) int32 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByInt64(keyFunc func(T) int64) int64 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByUint(keyFunc func(T) uint) uint {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByUint8(keyFunc func(T) uint8) uint8 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByUint16(keyFunc func(T) uint16) uint16 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByUint32(keyFunc func(T) uint32) uint32 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByUint64(keyFunc func(T) uint64) uint64 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByFloat32(keyFunc func(T) float32) float32 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByFloat64(keyFunc func(T) float64) float64 {
	return util.SumBy(i.iter, keyFunc)
}

func (i Iterator[T]) SumByString(keyFunc func(T) string) string {
	return util.SumBy(i.iter, keyFunc)
}
