package main

import (
	"fmt"
	"os"

	"iterator/generate/commons"
)

var extensionsHeader = `// Code generated by generate/extensions.go DO NOT EDIT.
package iterator

import (
	"iterator/util"
)
`

var extensionsToGenerate = []string{
	`
func (i Iterator[T]) MaxBy%[1]s(keyFunc func(T) %[2]s) (T, bool) {
	return util.MaxBy(i.iter, keyFunc)
}`,
	`
func (i Iterator[T]) MaxBy%[1]sOrZeroValue(keyFunc func(T) %[2]s) T {
	return util.MaxByOrZeroValue(i.iter, keyFunc)
}`,
	`
func (i Iterator[T]) MaxBy%[1]sOrDefault(keyFunc func(T) %[2]s, def T) T {
	return util.MaxByOrDefault(i.iter, keyFunc, def)
}`,
	`
func (i Iterator[T]) MinBy%[1]s(keyFunc func(T) %[2]s) (T, bool) {
	return util.MinBy(i.iter, keyFunc)
}`,
	`
func (i Iterator[T]) MinBy%[1]sOrZeroValue(keyFunc func(T) %[2]s) T {
	return util.MinByOrZeroValue(i.iter, keyFunc)
}`,
	`
func (i Iterator[T]) MinBy%[1]sOrDefault(keyFunc func(T) %[2]s, def T) T {
	return util.MinByOrDefault(i.iter, keyFunc, def)
}`,
	`
func (i Iterator[T]) SumBy%[1]s(keyFunc func(T) %[2]s) %[2]s {
	return util.SumBy(i.iter, keyFunc)
}`,
}

func main() {
	resultFileName := "extensions.generated.go"
	file, err := os.Create(resultFileName)
	if err != nil {
		fmt.Printf("Error creating file %s: %v", resultFileName, err)
		return
	}
	defer func() { _ = file.Close() }()
	_, err = file.WriteString(extensionsHeader)
	if err != nil {
		fmt.Printf("Error writing: %v", err)
		return
	}
	for _, template := range extensionsToGenerate {
		for _, typeName := range commons.OrderedTypes {
			typeNameCap := commons.Capitalize(typeName)
			_, err = fmt.Fprintf(file, template+"\n", typeNameCap, typeName)
		}
	}
	fmt.Println("Extensions OK")
}
